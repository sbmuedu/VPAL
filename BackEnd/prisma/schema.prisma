// schema.prisma 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====
enum UserRole {
  STUDENT
  NURSE
  SUPERVISOR
  MEDICAL_EXPERT
  ADMIN
}

enum ScenarioDifficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum SessionStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum TimeFlowMode {
  REAL_TIME
  ACCELERATED
  PAUSED
}

enum ActionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

enum EventPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AssessmentType {
  FORMATIVE
  SUMMATIVE
}

enum EmotionalState {
  CALM
  ANXIOUS
  COOPERATIVE
  RESISTANT
  DISTRESSED
  ANGRY
  CONFUSED
}

enum AuthenticationProvider {
  LOCAL
  INSTITUTIONAL
  OAUTH_GOOGLE
  OAUTH_MICROSOFT
}

// ===== CORE MODELS =====
model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String?
  firstName      String
  lastName       String
  role           UserRole
  specialization String?
  licenseNumber  String?
  institutionId  String?

  // Authentication
  authProvider AuthenticationProvider @default(LOCAL)
  externalId   String?
  isActive     Boolean                @default(true)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?

  // Relations
  institution Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  // Scenarios
  createdScenarios MedicalScenario[] @relation("ScenarioCreator")
  scenarioVersions ScenarioVersion[] @relation("ScenarioVersionCreator")

  // Sessions
  studentSessions    ScenarioSession[] @relation("StudentSessions")
  supervisedSessions ScenarioSession[] @relation("SupervisedSessions")

  // Actions & Interventions
  initiatedActions MedicalAction[]          @relation("ActionInitiator")
  performedActions MedicalAction[]          @relation("ActionPerformer")
  interventions    SupervisorIntervention[]

  // Orders
  medicationOrders        MedicationOrder[] @relation("MedicationOrderStudent")
  administeredMedications MedicationOrder[] @relation("MedicationOrderAdministeredBy")
  procedureOrders         ProcedureOrder[]  @relation("ProcedureOrderStudent")
  performedProcedures     ProcedureOrder[]  @relation("ProcedureOrderPerformedBy")
  labOrders               LabOrder[]        @relation("LabOrderStudent")
  collectedLabs           LabOrder[]        @relation("LabOrderCollectedBy")
  imagingOrders           ImagingOrder[]    @relation("ImagingOrderStudent")
  performedImaging        ImagingOrder[]    @relation("ImagingOrderPerformedBy")
  examOrders              ExamOrder[]       @relation("ExamOrderStudent")

  // Other
  conversations      LLMConversation[]
  timeEvents         TimeEvent[]
  sessionAssessments SessionAssessment[]

  // Medical Knowledge Base - Validation
  validatedDrugs      Drug[]            @relation("DrugValidator")
  validatedProcedures Procedure[]       @relation("ProcedureValidator")
  validatedTests      LaboratoryTest[]  @relation("LabTestValidator")
  validatedStudies    ImagingStudy[]    @relation("ImagingValidator")
  validatedExams      PhysicalExam[]    @relation("ExamValidator")
  validatedScenarios  MedicalScenario[] @relation("ScenarioValidator")
  validatedVersions   ScenarioVersion[] @relation("VersionValidator")
  validatedOrderSets  OrderSet[]        @relation("OrderSetValidator")

  @@map("users")
}

model Institution {
  id        String   @id @default(uuid())
  name      String   @unique
  domain    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  users               User[]
  scenarios           MedicalScenario[]
  institutionalConfig InstitutionalConfig?

  @@map("institutions")
}

model InstitutionalConfig {
  id            String      @id @default(uuid())
  institutionId String      @unique
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  // Configuration
  maxUsers                Int?
  allowedDomains          String[]
  customAssessmentRubrics Json?
  scenarioAccessLevel     String   @default("INSTITUTIONAL")

  @@map("institutional_configs")
}

// ===== SCENARIO MANAGEMENT =====
model MedicalScenario {
  id                String             @id @default(uuid())
  title             String
  description       String
  difficulty        ScenarioDifficulty
  specialty         String
  tags              String[]
  estimatedDuration Int

  // Time settings
  timeAccelerationRate   Int     @default(60)
  maxFastForwardDuration Int?
  requiresTimePressure   Boolean @default(false)

  // Educational objectives
  competencyWeights  Json
  learningObjectives String[]

  // Patient presentation
  chiefComplaint          String
  historyOfPresentIllness String
  pastMedicalHistory      String
  medications             String[]
  allergies               String[]
  initialVitalSigns       Json
  initialEmotionalState   EmotionalState @default(CALM)

  // Physiological model
  physiologyModel      Json
  complicationTriggers Json?
  naturalProgression   Json?

  // Scenario timeline
  scheduledEvents Json?
  branchingPaths  Json?

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?     @relation("ScenarioValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)
  validationDate      DateTime?
  validationNotes     String?

  // Metadata
  version       Float        @default(1.0)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  createdBy     String
  creator       User         @relation("ScenarioCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull)

  // Relations
  sessions ScenarioSession[]
  versions ScenarioVersion[]

  @@map("medical_scenarios")
}

model ScenarioVersion {
  id         String          @id @default(uuid())
  scenarioId String
  scenario   MedicalScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  version     Float
  changes     Json
  changeNotes String

  validatedByExpertId String?
  validatedByExpert   User?   @relation("VersionValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  createdBy String
  creator   User     @relation("ScenarioVersionCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@unique([scenarioId, version])
  @@map("scenario_versions")
}

// ===== SESSION MANAGEMENT =====
model ScenarioSession {
  id         String          @id @default(uuid())
  scenarioId String
  scenario   MedicalScenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)

  // Participants
  studentId String
  student   User   @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)

  supervisorId String?
  supervisor   User?   @relation("SupervisedSessions", fields: [supervisorId], references: [id], onDelete: SetNull)

  // Session status
  status         SessionStatus  @default(ACTIVE)
  assessmentType AssessmentType @default(FORMATIVE)

  // Time tracking
  startTime               DateTime     @default(now())
  endTime                 DateTime?
  currentVirtualTime      DateTime
  lastRealTimeUpdate      DateTime
  timeFlowMode            TimeFlowMode @default(REAL_TIME)
  totalRealTimeElapsed    Int          @default(0)
  totalVirtualTimeElapsed Int          @default(0)
  timePressureEnabled     Boolean      @default(false)

  // Progress tracking
  complicationsEncountered String[]
  mistakesMade             Json?
  interventionsReceived    Json?

  // Current state
  currentPatientState   Json
  currentEmotionalState EmotionalState
  completedSteps        String[]
  activeMedications     Json?
  latestVitalSigns      Json

  // Multi-patient support
  parentSessionId String?
  parentSession   ScenarioSession?  @relation("MultiPatientSessions", fields: [parentSessionId], references: [id])
  childSessions   ScenarioSession[] @relation("MultiPatientSessions")

  // Assessment
  competencyScores       Json
  overallScore           Float?
  timeEfficiencyScore    Float?
  stressPerformanceScore Float?
  finalFeedback          String?

  // Relations
  encounters         PatientEncounter[]
  actions            MedicalAction[]
  conversations      LLMConversation[]
  timeEvents         TimeEvent[]
  interventions      SupervisorIntervention[]
  sessionAssessments SessionAssessment[]
  timeUsageAnalytics TimeUsageAnalytics[]

  // Orders
  medicationOrders MedicationOrder[]
  procedureOrders  ProcedureOrder[]
  labOrders        LabOrder[]
  imagingOrders    ImagingOrder[]
  examOrders       ExamOrder[]

  @@map("scenario_sessions")
}

model MedicalAction {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  initiatedById String
  initiatedBy   User   @relation("ActionInitiator", fields: [initiatedById], references: [id], onDelete: Cascade)

  performedById String?
  performedBy   User?   @relation("ActionPerformer", fields: [performedById], references: [id], onDelete: SetNull)

  actionType    String
  actionDetails Json

  // Time tracking
  realTimeRequired     Int?
  virtualTimeRequired  Int?
  realTimeStarted      DateTime?
  realTimeCompleted    DateTime?
  virtualTimeStarted   DateTime?
  virtualTimeCompleted DateTime?

  status   ActionStatus  @default(PENDING)
  priority EventPriority @default(MEDIUM)

  // Outcomes
  expectedOutcome     Json?
  actualOutcome       Json?
  consequenceSeverity Int?

  // Order timing
  expectedCompletionVirtualTime DateTime?
  canBeFastForwarded            Boolean   @default(true)

  // Assessment
  performedCorrectly Boolean?
  feedback           String?
  timePenalty        Int?

  // Relations
  timeEvents TimeEvent[]

  @@map("medical_actions")
}

model TimeEvent {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  triggeredByActionId String?
  triggeredByAction   MedicalAction? @relation(fields: [triggeredByActionId], references: [id], onDelete: SetNull)

  eventType            String
  eventData            Json
  virtualTimeScheduled DateTime
  virtualTimeTriggered DateTime?
  realTimeTriggered    DateTime?

  // Consequences
  isComplication    Boolean       @default(false)
  severity          EventPriority @default(MEDIUM)
  requiresAttention Boolean       @default(false)
  wasMissed         Boolean       @default(false)
  missPenalty       Int?

  // Acknowledgment
  acknowledgedByUserId String?
  acknowledgedBy       User?     @relation(fields: [acknowledgedByUserId], references: [id], onDelete: SetNull)
  acknowledgedAt       DateTime?

  @@map("time_events")
}

model SupervisorIntervention {
  id           String          @id @default(uuid())
  sessionId    String
  session      ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  supervisorId String
  supervisor   User            @relation(fields: [supervisorId], references: [id], onDelete: Cascade)

  interventionType String
  message          String
  contextData      Json?
  virtualTime      DateTime

  // Response tracking
  studentAcknowledged   Boolean  @default(false)
  studentResponse       String?
  interventionEffective Boolean?

  createdAt DateTime @default(now())

  @@map("supervisor_interventions")
}

model PatientEncounter {
  id            String          @id @default(uuid())
  sessionId     String
  session       ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  encounterType String

  // Time tracking
  timestamp           DateTime @default(now())
  virtualTimestamp    DateTime
  realTimeDuration    Int
  virtualTimeDuration Int

  // Clinical data
  subjectiveFindings Json
  objectiveFindings  Json
  assessment         Json
  plan               Json
  emotionalContext   EmotionalState

  @@map("patient_encounters")
}

model LLMConversation {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Conversation content
  userMessage       String
  patientResponse   String
  messageContext    Json
  emotionalContext  EmotionalState
  conversationDepth Int            @default(1)

  // Time tracking
  timestamp        DateTime @default(now())
  virtualTimestamp DateTime
  realTimeSpent    Int

  // Quality assessment
  medicalAccuracy          Float?
  appropriateness          Float?
  emotionalAppropriateness Float?

  @@map("llm_conversations")
}

// ===== ASSESSMENT SYSTEM =====
model AssessmentMetric {
  id              String              @id @default(uuid())
  name            String
  description     String
  weight          Float
  category        String
  difficultyLevel ScenarioDifficulty?

  // Relations
  sessionAssessments SessionAssessment[]

  @@map("assessment_metrics")
}

model SessionAssessment {
  id               String           @id @default(uuid())
  sessionId        String
  session          ScenarioSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  metricId         String
  metric           AssessmentMetric @relation(fields: [metricId], references: [id], onDelete: Cascade)
  assessedByUserId String?
  assessedBy       User?            @relation(fields: [assessedByUserId], references: [id], onDelete: SetNull)

  score             Float
  feedback          String
  evidence          Json
  timeEfficiency    Float?
  stressPerformance Float?

  assessmentType AssessmentType @default(FORMATIVE)
  assessedAt     DateTime       @default(now())

  @@unique([sessionId, metricId])
  @@map("session_assessments")
}

model TimeUsageAnalytics {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  timeUsageBreakdown   Json
  efficiencyMetrics    Json
  decisionTiming       Json
  stressImpactAnalysis Json

  analyzedAt DateTime @default(now())

  @@map("time_usage_analytics")
}

// ===== MEDICAL KNOWLEDGE BASE =====
model Drug {
  id          String   @id @default(uuid())
  name        String   @unique
  genericName String
  brandNames  String[]

  // Classification
  drugClass String
  subClass  String?
  category  String

  // Dosage information
  standardDosages      Json
  administrationRoutes String[]
  frequencyOptions     String[]

  // Clinical information
  indications          String[]
  contraindications    String[]
  sideEffects          String[]
  interactions         String[]
  monitoringParameters String[]

  // Time parameters
  onsetOfAction String?
  duration      String?
  halfLife      String?

  // Validation
  fdaApproved         Boolean @default(true)
  validatedByExpertId String?
  validatedByExpert   User?   @relation("DrugValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  medicationOrders MedicationOrder[]
  interactionsAs1  DrugInteraction[] @relation("DrugInteraction1")
  interactionsAs2  DrugInteraction[] @relation("DrugInteraction2")

  @@map("drugs")
}

model Procedure {
  id          String  @id @default(uuid())
  code        String?
  name        String  @unique
  description String
  category    String

  // Procedure details
  indications       String[]
  contraindications String[]
  requiredEquipment String[]
  steps             Json
  risks             String[]
  complications     String[]

  // Time requirements
  estimatedRealTime    Int
  estimatedVirtualTime Int
  requiresSupervision  Boolean            @default(false)
  difficultyLevel      ScenarioDifficulty

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?   @relation("ProcedureValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  procedureOrders ProcedureOrder[]

  @@map("procedures")
}

model LaboratoryTest {
  id          String  @id @default(uuid())
  code        String?
  name        String  @unique
  description String
  category    String

  // Test information
  specimenTypes          String[]
  collectionInstructions String
  normalRanges           Json
  criticalValues         Json
  interpretationGuide    String

  // Time parameters
  processingTimeVirtual     Int
  statProcessingTimeVirtual Int?
  requiresCollection        Boolean @default(true)

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?   @relation("LabTestValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  labOrders LabOrder[]

  @@map("laboratory_tests")
}

model ImagingStudy {
  id          String  @id @default(uuid())
  code        String?
  name        String  @unique
  description String
  modality    String

  // Study information
  indications             String[]
  contraindications       String[]
  preparationInstructions String
  radiationExposure       String?

  // Time parameters
  durationRealTime    Int
  durationVirtualTime Int
  statDurationVirtual Int?

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?   @relation("ImagingValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  imagingOrders ImagingOrder[]

  @@map("imaging_studies")
}

model PhysicalExam {
  id          String @id @default(uuid())
  name        String @unique
  description String
  system      String

  // Exam details
  technique         String
  normalFindings    String
  abnormalFindings  Json
  requiredEquipment String[]

  // Time requirements
  estimatedRealTime    Int
  estimatedVirtualTime Int

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?   @relation("ExamValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  examOrders ExamOrder[]

  @@map("physical_exams")
}

// ===== ORDER MODELS =====
model MedicationOrder {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("MedicationOrderStudent", fields: [studentId], references: [id], onDelete: Cascade)
  prescribedBy String

  drugId String
  drug   Drug   @relation(fields: [drugId], references: [id], onDelete: Cascade)

  // Order details
  dosage     String
  route      String
  frequency  String
  duration   String?
  indication String

  // Time tracking
  orderTime                  DateTime  @default(now())
  virtualOrderTime           DateTime
  expectedAdministrationTime DateTime?
  actualAdministrationTime   DateTime?
  scheduledTime              DateTime?

  // Status and outcomes
  status               ActionStatus @default(PENDING)
  administeredByUserId String?
  administeredBy       User?        @relation("MedicationOrderAdministeredBy", fields: [administeredByUserId], references: [id], onDelete: SetNull)
  response             Json?

  // Assessment
  appropriatenessScore Float?
  timingScore          Float?
  documentationScore   Float?

  @@map("medication_orders")
}

model ProcedureOrder {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("ProcedureOrderStudent", fields: [studentId], references: [id], onDelete: Cascade)

  procedureId String
  procedure   Procedure @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  // Order details
  indication String
  location   String?
  urgency    EventPriority @default(MEDIUM)

  // Time tracking
  orderTime        DateTime  @default(now())
  virtualOrderTime DateTime
  scheduledTime    DateTime?
  completionTime   DateTime?

  // Status and outcomes
  status            ActionStatus @default(PENDING)
  performedByUserId String?
  performedBy       User?        @relation("ProcedureOrderPerformedBy", fields: [performedByUserId], references: [id], onDelete: SetNull)
  findings          Json?
  complications     String[]

  // Assessment
  techniqueScore  Float?
  indicationScore Float?
  safetyScore     Float?

  @@map("procedure_orders")
}

model LabOrder {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("LabOrderStudent", fields: [studentId], references: [id], onDelete: Cascade)

  testId String
  test   LaboratoryTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  // Order details
  indication String
  urgency    EventPriority @default(MEDIUM)
  statOrder  Boolean       @default(false)

  // Time tracking
  orderTime              DateTime  @default(now())
  virtualOrderTime       DateTime
  collectionTime         DateTime?
  resultTime             DateTime?
  expectedTurnaroundTime Int?      @default(60)

  // Status and results
  status            ActionStatus @default(PENDING)
  collectedByUserId String?
  collectedBy       User?        @relation("LabOrderCollectedBy", fields: [collectedByUserId], references: [id], onDelete: SetNull)
  results           Json?
  isCritical        Boolean      @default(false)

  // Assessment
  appropriatenessScore Float?
  interpretationScore  Float?
  timingScore          Float?

  @@map("lab_orders")
}

model ImagingOrder {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("ImagingOrderStudent", fields: [studentId], references: [id], onDelete: Cascade)

  studyId String
  study   ImagingStudy @relation(fields: [studyId], references: [id], onDelete: Cascade)

  // Order details
  indication String
  bodyPart   String
  urgency    EventPriority @default(MEDIUM)
  statOrder  Boolean       @default(false)

  // Time tracking
  orderTime        DateTime  @default(now())
  virtualOrderTime DateTime
  studyTime        DateTime?
  resultTime       DateTime?

  // Status and results
  status            ActionStatus @default(PENDING)
  performedByUserId String?
  performedBy       User?        @relation("ImagingOrderPerformedBy", fields: [performedByUserId], references: [id], onDelete: SetNull)
  findings          Json?
  isCritical        Boolean      @default(false)

  // Assessment
  appropriatenessScore Float?
  interpretationScore  Float?

  @@map("imaging_orders")
}

model ExamOrder {
  id        String          @id @default(uuid())
  sessionId String
  session   ScenarioSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  studentId String
  student   User   @relation("ExamOrderStudent", fields: [studentId], references: [id], onDelete: Cascade)

  examId String
  exam   PhysicalExam @relation(fields: [examId], references: [id], onDelete: Cascade)

  // Order details
  indication String
  bodyPart   String?

  // Time tracking
  orderTime        DateTime  @default(now())
  virtualOrderTime DateTime
  performedTime    DateTime?

  // Status and findings
  status   ActionStatus @default(PENDING)
  findings Json?
  normal   Boolean?

  // Assessment
  techniqueScore     Float?
  documentationScore Float?
  completenessScore  Float?

  @@map("exam_orders")
}

// ===== ORDER SETS & INTERACTIONS =====
model OrderSet {
  id          String             @id @default(uuid())
  name        String
  description String
  category    String
  difficulty  ScenarioDifficulty

  // Orders in this set
  medications    Json
  procedures     String[]
  labTests       String[]
  imagingStudies String[]
  exams          String[]

  // Clinical context
  indications       String[]
  contraindications String[]

  // Validation
  validatedByExpertId String?
  validatedByExpert   User?   @relation("OrderSetValidator", fields: [validatedByExpertId], references: [id], onDelete: SetNull)

  // Metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("order_sets")
}

model DrugInteraction {
  id      String @id @default(uuid())
  drug1Id String
  drug1   Drug   @relation("DrugInteraction1", fields: [drug1Id], references: [id], onDelete: Cascade)
  drug2Id String
  drug2   Drug   @relation("DrugInteraction2", fields: [drug2Id], references: [id], onDelete: Cascade)

  interactionType String
  description     String
  mechanism       String?
  management      String?

  severity      EventPriority
  evidenceLevel String?

  @@unique([drug1Id, drug2Id])
  @@map("drug_interactions")
}
